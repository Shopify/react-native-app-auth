

buildscript {
    repositories {
        gradlePluginPortal()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.1'
        classpath 'org.ajoberstar.grgit:grgit-gradle:4.1.1'
        classpath 'org.jacoco:org.jacoco.core:0.8.7'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

subprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def compileSdkVersion = 31
project.ext {
    minSdkVersion = 16
    compileSdkVersion = 31

    googleVersions = [
        glide                 : '4.12.0',
        material              : '1.3.0',
    ]

    androidXVersions = [
        annotation            : '1.2.0',
        appCompat             : '1.3.0',
        browser               : '1.3.0',
    ]

    okioVersion = '2.10.0'
    jodaVersion = '2.10.10'
}

def versionName = 'Release'
def versionNum = '0.11.0'
def versionDate = new Date()

android {
    compileSdkVersion 31
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        versionCode 'Release'
        versionName '0.11.0'
    }
    sourceSets {
        main.manifest.srcFile 'AndroidManifest.xml'
        main.java.srcDirs = ['java']
        main.aidl.srcDirs = ['java']
        main.res.srcDir 'res'
        main.assets.srcDir 'assets'
        main.resources.srcDir 'java'
        test.setRoot('javatests')
        test.java.srcDir('javatests')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        warningsAsErrors true
        disable 'InvalidPackage', 'TrulyRandom', 'UseCompoundDrawables', 'GradleDependency'
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

group = GROUP
version = rootProject.versionName

project.archivesBaseName = 'appauth'

// produces just the classes JAR
task jar(type: Copy, dependsOn:'bundleRelease') {
    from("${project.buildDir}/intermediates/bundles/release/")
    into("${project.buildDir}/libs/")
    include('classes.jar')
    rename('classes.jar', "appauth-${rootProject.versionName}.jar")
}

// produces a JAR containing sources
task sourcesJar(type: Jar, dependsOn:'generateReleaseSources') {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

android.testOptions {
    unitTests.includeAndroidResources = true
}

dependencies {
    api "androidx.browser:browser:${project.androidXVersions.browser}"
    implementation "androidx.annotation:annotation:${project.androidXVersions.annotation}"
    implementation "androidx.appcompat:appcompat:${project.androidXVersions.appCompat}"
    apply from: '../config/testdeps.gradle', to:it
}

apply from: '../config/style.gradle'
apply from: '../config/coverage.gradle'
apply from: '../config/javadoc.gradle'

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        release(MavenPublication) {
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version rootProject.versionName

            artifact("$buildDir/outputs/aar/${project.archivesBaseName}-release.aar")
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                packaging = POM_PACKAGING
                url = POM_URL
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        url = POM_DEVELOPER_URL
                    }
                }
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
                // A slightly hacky fix so that the POM will include transitive dependencies
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username project.hasProperty('ossrhUsername') ? ossrhUsername : ''
                password project.hasProperty('ossrhPassword') ? ossrhPassword : ''
            }
        }
    }
}

signing {
    required { hasProperty('signing.keyId') }
    sign publishing.publications
}
